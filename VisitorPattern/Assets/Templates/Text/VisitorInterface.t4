<#@ Template Inherits="NuPattern.Library.ModelElementTextTransformation" HostSpecific="True" Debug="False" #>
<#@ ModelElement Type="NuPattern.Runtime.IProductElement" Processor="ModelElementProcessor" #>
<#@ Assembly Name="NuPattern.Common.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Extensibility.dll" #>
<#@ Import Namespace="NuPattern.Runtime" #>
<#@ Import Namespace="NuPattern.Runtime.ToolkitInterface" #>
<#@ Assembly Name="VisitorPattern.Automation.dll" #>
<#@ Import Namespace="VisitorPattern" #>
<#@ Import Namespace="System.Linq" #>
<#@ Output extension=".cs" #>
<#
// Notes to Author: 
// See HowTo topics in the Guidance for help with using Text Templates in a Pattern Toolkit
// See: http://msdn.microsoft.com/en-us/library/bb126445.aspx for general help with T4 templates

// TODO: Change the extension in the < Output > directive above to output the file type you need. 
// By default this template generates a C# code file.
    
// TODO: Replace IMyPattern in the lines below with the CodeIdentifier of the pattern element upon which this template is configured.
// Note: this could be the root pattern element, or any other element in your pattern model. 
// Each element has its own interface using the CodeIdentifier property, preceeded with a captial I
    
    var currentElement = (IProductElement)this.Element;
    var localProject = currentElement.As<IMyProject>();
    


// Note: The <auto-generated> header below is recommended when generating any C#/VB code, as it allows code analysis tools to be configured to ignore the code in this.
#>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#= localProject.Namespace #>
{
    public interface IVisitor<out T>
    {
        <#    foreach (var i in localProject.Classes) { #>
                
                    T Visit(<#= i.InstanceName #> node);
        <#    } #>
         
    }
}