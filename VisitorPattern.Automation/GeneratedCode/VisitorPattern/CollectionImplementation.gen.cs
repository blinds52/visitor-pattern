//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VisitorPattern
{
	using global::NuPattern.Runtime;
	using global::NuPattern.Runtime.Bindings;
	using global::NuPattern.Runtime.ToolkitInterface;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	/// <summary>
	/// List of Projects
	/// </summary>
	[Description("List of Projects")]
	[ToolkitInterfaceProxy(ExtensionId = "7abcea20-93c2-4584-8704-5c5bd2c47659", DefinitionId = "5d5eabd8-a59f-46c8-80f1-ce793927fa56", ProxyType = typeof(Projects))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.4.24.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Projects : IProjects
	{

		private Runtime.IAbstractElement target;
		private IAbstractElementProxy<IProjects> proxy;

		/// <summary>
		/// Creates a new instance of the <see cref="Projects"/> class.
		/// </summary>
		[ImportingConstructor]
		private Projects() { }

		/// <summary>
		/// Creates a new instance of the <see cref="Projects"/> class.
		/// </summary>
		public Projects(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IProjects>();
			OnCreated();
		}

		/// <summary>
		/// When overridden, initializes the class.
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// The name of this element instance.
		/// </summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}

		/// <summary>
		/// The order of this element relative to its siblings.
		/// </summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}

		/// <summary>
		/// The references of this element.
		/// </summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}

		/// <summary>
		/// Notes for this element.
		/// </summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}

		/// <summary>
		/// Gets or sets the InTransaction property.
		/// </summary>
		public virtual Boolean InTransaction
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}

		/// <summary>
		/// Gets or sets the IsSerializing property.
		/// </summary>
		public virtual Boolean IsSerializing
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDefaultView Parent
		{
			get { return this.target.Parent.As<IDefaultView>(); }
		}

		/// <summary>
		/// Gets all instances of <see cref="IMyProject"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IMyProject> MyProjects
		{ 
			get { return proxy.GetElements(() => this.MyProjects, element => new MyProject(element)); }
		}

		/// <summary>
		/// Creates a new <see cref="IMyProject"/>  and adds it to the <see cref="MyProjects"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IMyProject CreateMyProject(string name, Action<IMyProject> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateCollection<IMyProject>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this element.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}

		/// <summary>
		/// Gets the generalized interface (<see cref="Runtime.ICollection"/>) of this element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the specified generalized interface of this element, if possible.
		/// </summary>
		public virtual TGeneralizedInterface As<TGeneralizedInterface>() where TGeneralizedInterface : class
		{
			return this.target as TGeneralizedInterface;
		}
	}
}

namespace VisitorPattern
{
	using global::NuPattern.Runtime;
	using global::NuPattern.Runtime.Bindings;
	using global::NuPattern.Runtime.ToolkitInterface;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	/// <summary>
	/// A Project in Your Solution
	/// </summary>
	[Description("A Project in Your Solution")]
	[ToolkitInterfaceProxy(ExtensionId = "7abcea20-93c2-4584-8704-5c5bd2c47659", DefinitionId = "c3dc8dd9-04f8-4701-8d40-f57c7f490fe3", ProxyType = typeof(MyProject))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.4.24.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class MyProject : IMyProject
	{

		private Runtime.IAbstractElement target;
		private IAbstractElementProxy<IMyProject> proxy;

		/// <summary>
		/// Creates a new instance of the <see cref="MyProject"/> class.
		/// </summary>
		[ImportingConstructor]
		private MyProject() { }

		/// <summary>
		/// Creates a new instance of the <see cref="MyProject"/> class.
		/// </summary>
		public MyProject(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IMyProject>();
			OnCreated();
		}

		/// <summary>
		/// When overridden, initializes the class.
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// Project Base Namespace
		/// </summary>
		[Description("Project Base Namespace")]
		[DisplayName("Namespace")]
		[Category("General")]
		public virtual String Namespace
		{
			get { return this.proxy.GetValue(() => this.Namespace); }
			set { this.proxy.SetValue(() => this.Namespace, value); }
		}

		/// <summary>
		/// The name of this element instance.
		/// </summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}

		/// <summary>
		/// The order of this element relative to its siblings.
		/// </summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}

		/// <summary>
		/// The references of this element.
		/// </summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}

		/// <summary>
		/// Notes for this element.
		/// </summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}

		/// <summary>
		/// Gets or sets the InTransaction property.
		/// </summary>
		public virtual Boolean InTransaction
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}

		/// <summary>
		/// Gets or sets the IsSerializing property.
		/// </summary>
		public virtual Boolean IsSerializing
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IProjects Parent
		{
			get { return this.target.Parent.As<IProjects>(); }
		}

		/// <summary>
		/// Gets all instances of <see cref="IClass"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IClass> Classes
		{ 
			get { return proxy.GetElements(() => this.Classes, element => new Class(element)); }
		}

		/// <summary>
		/// Creates a new <see cref="IClass"/>  and adds it to the <see cref="Classes"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IClass CreateClass(string name, Action<IClass> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IClass>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this element.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}

		/// <summary>
		/// Gets the generalized interface (<see cref="Runtime.ICollection"/>) of this element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the specified generalized interface of this element, if possible.
		/// </summary>
		public virtual TGeneralizedInterface As<TGeneralizedInterface>() where TGeneralizedInterface : class
		{
			return this.target as TGeneralizedInterface;
		}
	}
}
